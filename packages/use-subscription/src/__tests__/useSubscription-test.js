/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@emailsreact-core*/'usestrict';letact;letuseSubscription;letBehaviorSubject;letReact;letReactTestRenderer;letScheduler;letReplaySubject;letassertLog;letwaitForAll;letwaitFor;describe('useSubscription',()=>{beforeEach(()=>{jest.resetModules();jest.mock('scheduler',()=>require('scheduler/unstable_mock'));useSubscription=require('use-subscription').useSubscription;React=require('react');ReactTestRenderer=require('react-test-renderer');Scheduler=require('scheduler');act=require('internal-test-utils').act;BehaviorSubject=require('rxjs').BehaviorSubject;ReplaySubject=require('rxjs').ReplaySubject;constInternalTestUtils=require('internal-test-utils');waitForAll=InternalTestUtils.waitForAll;assertLog=InternalTestUtils.assertLog;waitFor=InternalTestUtils.waitFor;});functioncreateBehaviorSubject(initialValue){constbehaviorSubject=newBehaviorSubject();if(initialValue){behaviorSubject.next(initialValue);}returnbehaviorSubject;}functioncreateReplaySubject(initialValue){constreplaySubject=newReplaySubject();if(initialValue){replaySubject.next(initialValue);}returnreplaySubject;}it('supportsbasicsubscriptionpattern',async()=>{functionChild({value='default'}){Scheduler.log(value);returnnull;}functionSubscription({source}){constvalue=useSubscription(React.useMemo(()=>({getCurrentValue:()=>source.getValue(),subscribe:callback=>{constsubscription=source.subscribe(callback);return()=>subscription.unsubscribe();},}),[source],),);return<Childvalue={value}/>;}constobservable=createBehaviorSubject();letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Subscriptionsource={observable}/>,{unstable_isConcurrent:true},);});assertLog(['default']);//Updateswhilesubscribedshouldre-renderthechildcomponentawaitact(()=>observable.next(123));assertLog([123]);awaitact(()=>observable.next('abc'));assertLog(['abc']);//Unmountingthesubscribershouldremovelistenersawaitact(()=>renderer.update(<div/>));awaitact(()=>observable.next(456));awaitwaitForAll([]);});it('shouldsupportobservabletypeslikeRxJSReplaySubject',async()=>{functionChild({value='default'}){Scheduler.log(value);returnnull;}functionSubscription({source}){constvalue=useSubscription(React.useMemo(()=>({getCurrentValue:()=>{letcurrentValue;source.subscribe(tempValue=>{currentValue=tempValue;}).unsubscribe();returncurrentValue;},subscribe:callback=>{constsubscription=source.subscribe(callback);return()=>subscription.unsubscribe();},}),[source],),);return<Childvalue={value}/>;}letobservable=createReplaySubject('initial');letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Subscriptionsource={observable}/>,{unstable_isConcurrent:true},);});assertLog(['initial']);awaitact(()=>observable.next('updated'));assertLog(['updated']);awaitwaitForAll([]);//Unsettingthesubscriberpropshouldresetsubscribedvaluesobservable=createReplaySubject(undefined);awaitact(()=>renderer.update(<Subscriptionsource={observable}/>));assertLog(['default']);});it('shouldunsubscribefromoldsourcesandsubscribetonewsourceswhenmemoizedpropschange',async()=>{functionChild({value='default'}){Scheduler.log(value);returnnull;}constsubscriptions=[];functionSubscription({source}){constvalue=useSubscription(React.useMemo(()=>({getCurrentValue:()=>source.getValue(),subscribe:callback=>{subscriptions.push(source);constsubscription=source.subscribe(callback);return()=>subscription.unsubscribe();},}),[source],),);return<Childvalue={value}/>;}constobservableA=createBehaviorSubject('a-0');constobservableB=createBehaviorSubject('b-0');expect(subscriptions).toHaveLength(0);letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Subscriptionsource={observableA}/>,{unstable_isConcurrent:true},);});//Updateswhilesubscribedshouldre-renderthechildcomponentassertLog(['a-0']);expect(subscriptions).toHaveLength(1);expect(subscriptions[0]).toBe(observableA);//Unsettingthesubscriberpropshouldresetsubscribedvaluesawaitact(()=>renderer.update(<Subscriptionsource={observableB}/>));assertLog(['b-0']);expect(subscriptions).toHaveLength(2);expect(subscriptions[1]).toBe(observableB);//Updatestotheoldsubscribableshouldnotre-renderthechildcomponentawaitact(()=>observableA.next('a-1'));awaitwaitForAll([]);//Updatestothebewsubscribableshouldre-renderthechildcomponentawaitact(()=>observableB.next('b-1'));assertLog(['b-1']);expect(subscriptions).toHaveLength(2);});it('shouldunsubscribefromoldsourcesandsubscribetonewsourceswhenuseCallbackfunctionschange',async()=>{functionChild({value='default'}){Scheduler.log(value);returnnull;}constsubscriptions=[];functionSubscription({source}){constvalue=useSubscription({getCurrentValue:React.useCallback(()=>source.getValue(),[source]),subscribe:React.useCallback(callback=>{subscriptions.push(source);constsubscription=source.subscribe(callback);return()=>subscription.unsubscribe();},[source],),});return<Childvalue={value}/>;}constobservableA=createBehaviorSubject('a-0');constobservableB=createBehaviorSubject('b-0');expect(subscriptions).toHaveLength(0);letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Subscriptionsource={observableA}/>,{unstable_isConcurrent:true},);});//Updateswhilesubscribedshouldre-renderthechildcomponentassertLog(['a-0']);expect(subscriptions).toHaveLength(1);expect(subscriptions[0]).toBe(observableA);//Unsettingthesubscriberpropshouldresetsubscribedvaluesawaitact(()=>renderer.update(<Subscriptionsource={observableB}/>));assertLog(['b-0']);expect(subscriptions).toHaveLength(2);expect(subscriptions[1]).toBe(observableB);//Updatestotheoldsubscribableshouldnotre-renderthechildcomponentawaitact(()=>observableA.next('a-1'));awaitwaitForAll([]);//Updatestothebewsubscribableshouldre-renderthechildcomponentawaitact(()=>observableB.next('b-1'));assertLog(['b-1']);expect(subscriptions).toHaveLength(2);});it('shouldignorevaluesemittedbyanewsubscribableuntilthecommitphase',async()=>{constlog=[];functionGrandchild({value}){Scheduler.log('Grandchild:'+value);returnnull;}functionChild({value='default'}){Scheduler.log('Child:'+value);return<Grandchildvalue={value}/>;}functionSubscription({source}){constvalue=useSubscription(React.useMemo(()=>({getCurrentValue:()=>source.getValue(),subscribe:callback=>{constsubscription=source.subscribe(callback);return()=>subscription.unsubscribe();},}),[source],),);return<Childvalue={value}/>;}classParentextendsReact.Component{state={};staticgetDerivedStateFromProps(nextProps,prevState){if(nextProps.observed!==prevState.observed){return{observed:nextProps.observed,};}returnnull;}componentDidMount(){log.push('Parent.componentDidMount');}componentDidUpdate(){log.push('Parent.componentDidUpdate');}render(){return<Subscriptionsource={this.state.observed}/>;}}constobservableA=createBehaviorSubject('a-0');constobservableB=createBehaviorSubject('b-0');letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Parentobserved={observableA}/>,{unstable_isConcurrent:true,});});assertLog(['Child:a-0','Grandchild:a-0']);expect(log).toEqual(['Parent.componentDidMount']);//StartReactupdate,butdon'tfinishawaitact(async()=>{React.startTransition(()=>{renderer.update(<Parentobserved={observableB}/>);});awaitwaitFor(['Child:b-0']);expect(log).toEqual(['Parent.componentDidMount']);//EmitsomeupdatesfromtheuncommittedsubscribableobservableB.next('b-1');observableB.next('b-2');observableB.next('b-3');});//Updateagainawaitact(()=>renderer.update(<Parentobserved={observableA}/>));//Flusheverythingandensurethatthecorrectsubscribableisused//Weexpectthelastemittedupdatetoberendered(becauseofthecommitphasevaluecheck)//Buttheintermediateonesshouldbeignored,//Andthefinalrenderedoutputshouldbethehigher-priorityobservable.assertLog(['Grandchild:b-0','Child:b-3','Grandchild:b-3','Child:a-0','Grandchild:a-0',]);expect(log).toEqual(['Parent.componentDidMount','Parent.componentDidUpdate','Parent.componentDidUpdate',]);});it('shouldnotdropvaluesemittedbetweenupdates',async()=>{constlog=[];functionGrandchild({value}){Scheduler.log('Grandchild:'+value);returnnull;}functionChild({value='default'}){Scheduler.log('Child:'+value);return<Grandchildvalue={value}/>;}functionSubscription({source}){constvalue=useSubscription(React.useMemo(()=>({getCurrentValue:()=>source.getValue(),subscribe:callback=>{constsubscription=source.subscribe(callback);return()=>subscription.unsubscribe();},}),[source],),);return<Childvalue={value}/>;}classParentextendsReact.Component{state={};staticgetDerivedStateFromProps(nextProps,prevState){if(nextProps.observed!==prevState.observed){return{observed:nextProps.observed,};}returnnull;}componentDidMount(){log.push('Parent.componentDidMount:'+this.props.observed.value);}componentDidUpdate(){log.push('Parent.componentDidUpdate:'+this.props.observed.value);}render(){return<Subscriptionsource={this.state.observed}/>;}}constobservableA=createBehaviorSubject('a-0');constobservableB=createBehaviorSubject('b-0');letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Parentobserved={observableA}/>,{unstable_isConcurrent:true,});});assertLog(['Child:a-0','Grandchild:a-0']);expect(log).toEqual(['Parent.componentDidMount:a-0']);log.splice(0);//StartReactupdate,butdon'tfinishawaitact(async()=>{React.startTransition(()=>{renderer.update(<Parentobserved={observableB}/>);});awaitwaitFor(['Child:b-0']);expect(log).toEqual([]);//EmitsomeupdatesfromtheoldsubscribableobservableA.next('a-1');observableA.next('a-2');//Updateagainif(gate(flags=>flags.enableUnifiedSyncLane)){React.startTransition(()=>{renderer.update(<Parentobserved={observableA}/>);});}else{renderer.update(<Parentobserved={observableA}/>);}//FlusheverythingandensurethatthecorrectsubscribableisusedawaitwaitForAll(['Child:a-2','Grandchild:a-2','Child:a-2','Grandchild:a-2',]);expect(log).toEqual(['Parent.componentDidUpdate:a-2']);});//Updatesfromthenewsubscribableshouldbeignored.log.splice(0);awaitact(()=>observableB.next('b-1'));awaitwaitForAll([]);expect(log).toEqual([]);});it('shouldguardagainstupdatesthathappenafterunmounting',async()=>{functionChild({value='default'}){Scheduler.log(value);returnnull;}functionSubscription({source}){constvalue=useSubscription(React.useMemo(()=>({getCurrentValue:()=>source.getValue(),subscribe:callback=>{returnsource.subscribe(callback);},}),[source],),);return<Childvalue={value}/>;}consteventHandler={_callbacks:[],_value:true,change(value){eventHandler._value=value;const_callbacks=eventHandler._callbacks.slice(0);_callbacks.forEach(callback=>callback(value));},getValue(){returneventHandler._value;},subscribe(callback){eventHandler._callbacks.push(callback);return()=>{eventHandler._callbacks.splice(eventHandler._callbacks.indexOf(callback),1,);};},};eventHandler.subscribe(asyncvalue=>{if(value===false){renderer.unmount();}});letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Subscriptionsource={eventHandler}/>,{unstable_isConcurrent:true},);});assertLog([true]);//ThiseventshouldunmounteventHandler.change(false);});it('doesnotreturnavaluefromtheprevioussubscriptionifthesourceisupdated',async()=>{constsubscription1={getCurrentValue:()=>'one',subscribe:()=>()=>{},};constsubscription2={getCurrentValue:()=>'two',subscribe:()=>()=>{},};functionSubscription({subscription}){constvalue=useSubscription(subscription);if(value!==subscription.getCurrentValue()){throwError(`expectedvalue"${subscription.getCurrentValue()}"butgotvalue"${value}"`,);}returnnull;}letrenderer;awaitact(()=>{renderer=ReactTestRenderer.create(<Subscriptionsubscription={subscription1}/>,{unstable_isConcurrent:true},);});awaitwaitForAll([]);awaitact(()=>renderer.update(<Subscriptionsubscription={subscription2}/>),);awaitwaitForAll([]);});it('shouldnottearifamutationoccursduringaconcurrentupdate',async()=>{constinput=document.createElement('input');constmutate=value=>{input.value=value;input.dispatchEvent(newEvent('change'));};constsubscription={getCurrentValue:()=>input.value,subscribe:callback=>{input.addEventListener('change',callback);return()=>input.removeEventListener('change',callback);},};constSubscriber=({id})=>{constvalue=useSubscription(subscription);Scheduler.log(`render:${id}:${value}`);returnvalue;};awaitact(async()=>{//Initialrenderof"A"mutate('A');ReactTestRenderer.create(<React.Fragment><Subscriberid="first"/><Subscriberid="second"/></React.Fragment>,{unstable_isConcurrent:true},);awaitwaitForAll(['render:first:A','render:second:A']);//Updatestate"A"->"B"//Thisupdatewillbeeagerlyevaluated,//sothetearingcasethistestisguardingagainstwouldnothappen.mutate('B');awaitwaitForAll(['render:first:B','render:second:B']);//Nomorependingupdatesjest.runAllTimers();//Partialupdate"B"->"C"//Interruptwithasecondmutation"C"->"D".//Thisupdatewillnotbeeagerlyevaluated,//butuseSubscription()shouldeagerlycloseovertheupdatedvaluetoavoidtearing.React.startTransition(()=>{mutate('C');});awaitwaitFor(['render:first:C','render:second:C']);React.startTransition(()=>{mutate('D');});awaitwaitForAll(['render:first:D','render:second:D']);//Nomorependingupdatesjest.runAllTimers();});});});