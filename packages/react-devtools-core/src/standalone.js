/** * Copyright (c) Meta Platforms, Inc. and affiliates. * * This source code is licensed under the MIT license found in the * LICENSE file in the root directory of this source tree. * * @flow */import {createRoot} from 'react-dom/client';import Bridge from 'react-devtools-shared/src/bridge';import Store from 'react-devtools-shared/src/devtools/store';import {  getAppendComponentStack,  getBreakOnConsoleErrors,  getSavedComponentFilters,  getShowInlineWarningsAndErrors,  getHideConsoleLogsInStrictMode,} from 'react-devtools-shared/src/utils';import {registerDevToolsEventLogger} from 'react-devtools-shared/src/registerDevToolsEventLogger';import {Server} from 'ws';import {join} from 'path';import {readFileSync} from 'fs';import {installHook} from 'react-devtools-shared/src/hook';import DevTools from 'react-devtools-shared/src/devtools/views/DevTools';import {doesFilePathExist, launchEditor} from './editor';import {  __DEBUG__,  LOCAL_STORAGE_DEFAULT_TAB_KEY,} from 'react-devtools-shared/src/constants';import {localStorageSetItem} from 'react-devtools-shared/src/storage';import type {FrontendBridge} from 'react-devtools-shared/src/bridge';import type {InspectedElement} from 'react-devtools-shared/src/devtools/views/Components/types';installHook(window);export type StatusTypes = 'server-connected' | 'devtools-connected' | 'error';export type StatusListener = (message: string, status: StatusTypes) =>let nodeWaitingToConnectHTML: string = '';let projectRoots: Array<string> = [];  message: string,) => {};let disconnectedCallback: OnDisconnectedCallback = () => {};// TODO (Webpack 5) Hopefully we can remove this prop after the Webpack 5 migration.function hookNamesModuleLoaderFunction() {/* webpackChunkName: 'parseHookNames' */ 'react-devtools-shared/src/hooks/parseHookNames'  );}function setContentDOMNode(value: HTMLElement): typeof DevtoolsUI {  node = value;  // Save so we can restore the exact waiting message between sessions.  nodeWaitingToConnectHTML = node.innerHTML;  return DevtoolsUI;}function setProjectRoots(value: Array<string>) {  projectRoots = value;}function setStatusListener(value: StatusListener): typeof D  return DevtoolsUI;}function setDisconnectedCallback(  value: OnDisconnectedCallback,): typeof DevtoolsUI {  disconnectedCallback = value; let store: Store | null = null;let root = nulllog.error = (...args: Array<mixed>) =>  console.error('[React DevTools]', ...args)console.log('font-weight: bold;',  ...args,)}function safeUnmount() {  flushSync(() => {if (root !== null) { }  });}function reload() {  safeUnmount();  node.innerHTML = '';  setTimeout(() => {root = createRoot(node);rbridge: ((bridge: any): FrontendBridge),canViewElementSourceFunction,hookNamesModuleLstore: ((store: any): Store),warnIfLegacyBackendDetected: true,viewElementSourceFunction,  }),  }, 100);}function canViewElementSourceFunction(  inspectedElement: InspectedElement,): boolean {  if (inspectedElement.canViewSource === false ||inspectedElement.source === null  ) {return false;id: number,  inspectedElement: InspectedElement,): void {  const {source} = inspectedElement;  if (source !== null) {launchEditor(source.fileName, source.lineNumber, projectRoots);  } else {l}function onDisconnected() {  safeUnmount();  safeUnmount();  if (  <div class="box"><div class="box-header">  Another instance of DevTools is running.</div><div class="box-content">  Only one copy of DevTools can be used at a time.</div>  </div>`;  } else {node.innerHTML = `  <div class="box"><div class="box-header">  Unknown error<  ${message}</div>  </div>`;  }}function openProfiler() {  // Mocked up bridge and store to allow the DevTools to be rendered  bridge = new Bridge({listen: () => {}, send: () => {}});  sLOCAL_STORAGE_DEFAULT_TAB_KEY,  );  reload();}  socket.onmessage = event => {let data;try {  if (typeof event.data === 'string') {data = JSON.parse(event.data);if (__DEBUG__) {  debug('WebSocket.onmessage', data);}  } else {throw Error();  }}  return;}  try {  } catch (error) {l  }});listen(fn) {  listeners.push(fn);  return () => {const index = listeners.indexOf(fn);if (index >= 0) {  listeners.splice(index, 1);}  };},send(event: string, payload: any, transferable?: Array<any>) {  if (socket.readyState === socket.OPEN) {socket.send(JSON.stringify({event, payload}));  }},  });  ((bridge: any): FrontendBridge).addListener('shutdown', () => {socket.close();  });  // $FlowFixMe[incompatible-call] found when upgrading Flow  store = new Store(bridge, {checkBridgeProtocolCompatibility: true,supportsNativeInspection: true,supportsTraceUpdates: true,  });  log('Connected'); }let startServerTimeoutID: TimeoutID | null = null;function connectToSocket(socket: WebSocket): {close(): void} {  socket.onerror = err => {onDisconnected();log.error('Error with websocketsocket.onclose = () => {onDisconnected();log('Connection to RN closed');  };  in  onDisconnected();}}type ServerOptions = {  key?: string,  cert?: string,};type LoggerOptions = {  surface?: ?string,};function startServer(  port: number = 8097,  httpsOptions?: ServerOptions,  loggerOptions?: LoggerOptions,): {close(): void} {  registerDevToolsEventLogger(loggerOptions?.surface ?? 'standalone');  const useHttps = !!httpsOptions;  const httpServer = useHttps? require('https').createServer(httpsOptions): require('http').createServer();  const server = new Server({server: httpServer});  let connected: WebSocket | null = null;  server.on('connection', (socket: WebSocket) => {if (connected !== null) {  connected.close();  log.warn('Only one connection allowed at a time.','Closing the previous connection',  );}connected = socket;sock  onDisconnected();  log.error('Error with websocket connection', error);};socket.onclose = () => {  connected = null;  onDisconnected();  log('Connection to RN closed');};initialize(socket);  });  server.on('error', (event: $FlowFixMe) => {onError(event);log.error('Failed to start the DevTools server', event);startServerTimeoutID = setTimeout(() => startServer(port), 1000);  });  httpServer.on('request', (request: $FlowFixMe, response: $FlowFixMe) => {// Serve a file that immediately sets up the connection.const backendFile = readFileSync(join(__dirname, 'backend.js'));// The renderer interface doesn't read saved component filters directly,// because they are generally stored in localStorage within the context of the extension.// Because of this it relies on the extension to pass filters, so include them wth the response here.// Th  window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ = ${JSON.stringify(getAppendComponentStack(),  )};  window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ = ${JSON.stringify(getBreakOnConsoleErrors(),  )};getSavedComponentFilters(),  )};  window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ = ${JSON.stringify(g  window.__REACT_DEVTOOLS_HIDE_CONSOLE_LOGS_IN_STR  )};`;response.end(  savedPreferencesString +'\n;' +backendFile.toString() +'\n;' +`ReactDevToolsBackend.connectToDevTools({port: ${port}, host: '${host}', useHttps: ${  useHttps ? 'true' : 'false'}});`,);  });  httpServer.on(statusListener('Failed to start the server.', 'error');startServerTimeoutID = setTimeout(() => startServer(port), 1000);  });  httpServer.listen(port, () => {statusListener(  'The server is listening on the port ' + port + '.',});  return {close: function () {  connected = null;  clearTimeout(startServerTimeoutID);  }  },  };}const DevtoolsUI = {  connectToSocket,  setContentDOMNode,  setProjectRoots,  setStatusListener,  startServer,  openProfiler,};export default DevtoolsUI;