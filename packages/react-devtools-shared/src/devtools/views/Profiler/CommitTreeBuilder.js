/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@flow*/import{__DEBUG__,TREE_OPERATION_ADD,TREE_OPERATION_REMOVE,TREE_OPERATION_REMOVE_ROOT,TREE_OPERATION_REORDER_CHILDREN,TREE_OPERATION_SET_SUBTREE_MODE,TREE_OPERATION_UPDATE_TREE_BASE_DURATION,TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS,}from'react-devtools-shared/src/constants';import{utfDecodeString}from'react-devtools-shared/src/utils';import{ElementTypeRoot}from'react-devtools-shared/src/types';importProfilerStorefrom'react-devtools-shared/src/devtools/ProfilerStore';importtype{ElementType}from'react-devtools-shared/src/types';importtype{CommitTree,CommitTreeNode,ProfilingDataForRootFrontend,}from'react-devtools-shared/src/devtools/views/Profiler/types';constdebug=(methodName:string,...args:Array<string>)=>{if(__DEBUG__){console.log(`%cCommitTreeBuilder%c${methodName}`,'color:pink;font-weight:bold;','font-weight:bold;',...args,);}};constrootToCommitTreeMap:Map<number,Array<CommitTree>>=newMap();exportfunctiongetCommitTree({commitIndex,profilerStore,rootID,}:{commitIndex:number,profilerStore:ProfilerStore,rootID:number,}):CommitTree{if(!rootToCommitTreeMap.has(rootID)){rootToCommitTreeMap.set(rootID,[]);}constcommitTrees=((rootToCommitTreeMap.get(rootID,):any):Array<CommitTree>);if(commitIndex<commitTrees.length){returncommitTrees[commitIndex];}const{profilingData}=profilerStore;if(profilingData===null){throwError(`Noprofilingdataavailable`);}constdataForRoot=profilingData.dataForRoots.get(rootID);if(dataForRoot==null){throwError(`Couldnotfindprofilingdataforroot"${rootID}"`);}const{operations}=dataForRoot;if(operations.length<=commitIndex){throwError(`getCommitTree():Invalidcommit"${commitIndex}"forroot"${rootID}".Thereareonly"${operations.length}"commits.`,);}letcommitTree:CommitTree=((null:any):CommitTree);for(letindex=commitTrees.length;index<=commitIndex;index++){//Commitsaregeneratedsequentiallyandcached.//Ifthisistheveryfirstcommit,startwiththecachedsnapshotandapplythefirstmutation.//Otherwiseload(orgenerate)thepreviouscommitandappendamutationtoit.if(index===0){constnodes=newMap<number,CommitTreeNode>();//Constructtheinitialtree.recursivelyInitializeTree(rootID,0,nodes,dataForRoot);//Mutatethetreeif(operations!=null&&index<operations.length){commitTree=updateTree({nodes,rootID},operations[index]);if(__DEBUG__){__printTree(commitTree);}commitTrees.push(commitTree);}}else{constpreviousCommitTree=commitTrees[index-1];commitTree=updateTree(previousCommitTree,operations[index]);if(__DEBUG__){__printTree(commitTree);}commitTrees.push(commitTree);}}returncommitTree;}functionrecursivelyInitializeTree(id:number,parentID:number,nodes:Map<number,CommitTreeNode>,dataForRoot:ProfilingDataForRootFrontend,):void{constnode=dataForRoot.snapshots.get(id);if(node!=null){nodes.set(id,{id,children:node.children,displayName:node.displayName,hocDisplayNames:node.hocDisplayNames,key:node.key,parentID,treeBaseDuration:((dataForRoot.initialTreeBaseDurations.get(id,):any):number),type:node.type,});node.children.forEach(childID=>recursivelyInitializeTree(childID,id,nodes,dataForRoot),);}}functionupdateTree(commitTree:CommitTree,operations:Array<number>,):CommitTree{//Clonetheoriginaltreesoeditsdon'taffectit.constnodes=newMap(commitTree.nodes);//Clonenodesbeforemutatingthemsoeditsdon'taffectthem.constgetClonedNode=(id:number):CommitTreeNode=>{//$FlowFixMe[prop-missing]-recommendedfixistouseobjectspreadoperatorconstclonedNode=((Object.assign({},nodes.get(id),):any):CommitTreeNode);nodes.set(id,clonedNode);returnclonedNode;};leti=2;letid:number=((null:any):number);//Reassemblethestringtable.conststringTable:Array<null|string>=[null,//ID=0correspondstothenullstring.];conststringTableSize=operations[i++];conststringTableEnd=i+stringTableSize;while(i<stringTableEnd){constnextLength=operations[i++];constnextString=utfDecodeString((operations.slice(i,i+nextLength):any),);stringTable.push(nextString);i+=nextLength;}while(i<operations.length){constoperation=operations[i];switch(operation){caseTREE_OPERATION_ADD:{id=((operations[i+1]:any):number);consttype=((operations[i+2]:any):ElementType);i+=3;if(nodes.has(id)){thrownewError(`Committreealreadycontainsfiber"${id}".ThisisabuginReactDevTools.`,);}if(type===ElementTypeRoot){i++;//isStrictModeComplianti++;//Profilingflagi++;//supportsStrictModeflagi++;//hasOwnerMetadataflagif(__DEBUG__){debug('Add',`newrootfiber${id}`);}constnode:CommitTreeNode={children:[],displayName:null,hocDisplayNames:null,id,key:null,parentID:0,treeBaseDuration:0,//Thiswillbeupdatedbyasubsequentoperationtype,};nodes.set(id,node);}else{constparentID=((operations[i]:any):number);i++;i++;//ownerIDconstdisplayNameStringID=operations[i];constdisplayName=stringTable[displayNameStringID];i++;constkeyStringID=operations[i];constkey=stringTable[keyStringID];i++;if(__DEBUG__){debug('Add',`fiber${id}(${displayName||'null'})aschildof${parentID}`,);}constparentNode=getClonedNode(parentID);parentNode.children=parentNode.children.concat(id);constnode:CommitTreeNode={children:[],displayName,hocDisplayNames:null,id,key,parentID,treeBaseDuration:0,//Thiswillbeupdatedbyasubsequentoperationtype,};nodes.set(id,node);}break;}caseTREE_OPERATION_REMOVE:{constremoveLength=((operations[i+1]:any):number);i+=2;for(letremoveIndex=0;removeIndex<removeLength;removeIndex++){id=((operations[i]:any):number);i++;if(!nodes.has(id)){thrownewError(`Committreedoesnotcontainfiber"${id}".ThisisabuginReactDevTools.`,);}constnode=getClonedNode(id);constparentID=node.parentID;nodes.delete(id);if(!nodes.has(parentID)){//No-op}else{constparentNode=getClonedNode(parentID);if(__DEBUG__){debug('Remove',`fiber${id}fromparent${parentID}`);}parentNode.children=parentNode.children.filter(childID=>childID!==id,);}}break;}caseTREE_OPERATION_REMOVE_ROOT:{throwError('OperationREMOVE_ROOTisnotsupportedwhileprofiling.');}caseTREE_OPERATION_REORDER_CHILDREN:{id=((operations[i+1]:any):number);constnumChildren=((operations[i+2]:any):number);constchildren=((operations.slice(i+3,i+3+numChildren,):any):Array<number>);i=i+3+numChildren;if(__DEBUG__){debug('Re-order',`fiber${id}children${children.join(',')}`);}constnode=getClonedNode(id);node.children=Array.from(children);break;}caseTREE_OPERATION_SET_SUBTREE_MODE:{id=operations[i+1];constmode=operations[i+1];i+=3;if(__DEBUG__){debug('Subtreemode',`Subtreewithroot${id}settomode${mode}`);}break;}caseTREE_OPERATION_UPDATE_TREE_BASE_DURATION:{id=operations[i+1];constnode=getClonedNode(id);node.treeBaseDuration=operations[i+2]/1000;//Convertmicrosecondsbacktomilliseconds;if(__DEBUG__){debug('Update',`fiber${id}treeBaseDurationto${node.treeBaseDuration}`,);}i+=3;break;}caseTREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:{id=operations[i+1];constnumErrors=operations[i+2];constnumWarnings=operations[i+3];i+=4;if(__DEBUG__){debug('WarningsandErrorsupdate',`fiber${id}has${numErrors}errorsand${numWarnings}warnings`,);}break;}default:throwError(`UnsupportedBridgeoperation"${operation}"`);}}return{nodes,rootID:commitTree.rootID,};}exportfunctioninvalidateCommitTrees():void{rootToCommitTreeMap.clear();}//DEBUGconst__printTree=(commitTree:CommitTree)=>{if(__DEBUG__){const{nodes,rootID}=commitTree;console.group('__printTree()');constqueue=[rootID,0];while(queue.length>0){constid=queue.shift();constdepth=queue.shift();constnode=nodes.get(id);if(node==null){throwError(`Couldnotfindnodewithid"${id}"incommittree`);}console.log(`${'â€¢'.repeat(depth)}${node.id}:${node.displayName||''}${node.key?`key:"${node.key}"`:''}(${node.treeBaseDuration})`,);node.children.forEach(childID=>{queue.push(childID,depth+1);});}console.groupEnd();}};