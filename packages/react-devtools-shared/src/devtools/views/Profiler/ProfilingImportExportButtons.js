/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@flow*/import*asReactfrom'react';import{Fragment,useContext,useCallback,useRef}from'react';import{ProfilerContext}from'./ProfilerContext';import{ModalDialogContext}from'../ModalDialog';importButtonfrom'../Button';importButtonIconfrom'../ButtonIcon';import{StoreContext}from'../context';import{prepareProfilingDataExport,prepareProfilingDataFrontendFromExport,}from'./utils';import{downloadFile}from'../utils';import{TimelineContext}from'react-devtools-timeline/src/TimelineContext';importisArrayfrom'shared/isArray';importhasOwnPropertyfrom'shared/hasOwnProperty';importstylesfrom'./ProfilingImportExportButtons.css';importtype{ProfilingDataExport}from'./types';exportdefaultfunctionProfilingImportExportButtons():React.Node{const{isProfiling,profilingData,rootID}=useContext(ProfilerContext);const{setFile}=useContext(TimelineContext);conststore=useContext(StoreContext);const{profilerStore}=store;constinputRef=useRef<HTMLInputElement|null>(null);constdownloadRef=useRef<HTMLAnchorElement|null>(null);const{dispatch:modalDialogDispatch}=useContext(ModalDialogContext);constdoesHaveInMemoryData=profilerStore.didRecordCommits;constdownloadData=useCallback(()=>{if(rootID===null){return;}constanchorElement=downloadRef.current;if(profilingData!==null&&anchorElement!==null){constprofilingDataExport=prepareProfilingDataExport(profilingData);constdate=newDate();constdateString=date.toLocaleDateString(undefined,{year:'numeric',month:'2-digit',day:'2-digit',}).replace(/\//g,'-');consttimeString=date.toLocaleTimeString(undefined,{hour12:false,}).replace(/:/g,'-');downloadFile(anchorElement,`profiling-data.${dateString}.${timeString}.json`,JSON.stringify(profilingDataExport,null,2),);}},[rootID,profilingData]);constclickInputElement=useCallback(()=>{if(inputRef.current!==null){inputRef.current.click();}},[]);//TODO(profiling)Weshouldprobablyuseatransitionforthisandsuspendwhileloadingthefile.//Localfilesloadsofastit'sprobablynotverynoticeablethough.consthandleChange=()=>{constinput=inputRef.current;if(input!==null&&input.files.length>0){constfile=input.files[0];//TODO(profiling)HandlefileReadererrors.constfileReader=newFileReader();fileReader.addEventListener('load',()=>{constraw=((fileReader.result:any):string);constjson=JSON.parse(raw);if(!isArray(json)&&hasOwnProperty.call(json,'version')){//ThislookslikeReactprofilingdata.//Butfirst,clearanyUserTimingmarks;weshouldonlyhaveonetypeopenatatime.setFile(null);try{constprofilingDataExport=((json:any):ProfilingDataExport);profilerStore.profilingData=prepareProfilingDataFrontendFromExport(profilingDataExport);}catch(error){modalDialogDispatch({id:'ProfilingImportExportButtons',type:'SHOW',title:'Importfailed',content:(<Fragment><div>Theprofilingdatayouselectedcannotbeimported.</div>{error!==null&&(<divclassName={styles.ErrorMessage}>{error.message}</div>)}</Fragment>),});}}else{//Otherwiselet'sassumethisisTraceEventdataandpassittotheTimelinepreprocessor.//Butfirst,clearReactprofilingdata;weshouldonlyhaveonetypeopenatatime.profilerStore.clear();//TODO(timeline)Weshouldn'tneedtore-opentheFilebutwe'llneedtorefactortoavoidthis.setFile(file);}});fileReader.readAsText(file);}};return(<Fragment><divclassName={styles.VRule}/><inputref={inputRef}className={styles.Input}type="file"accept=".json"onChange={handleChange}tabIndex={-1}/><aref={downloadRef}className={styles.Input}/><Buttondisabled={isProfiling}onClick={clickInputElement}title="Loadprofile..."><ButtonIcontype="import"/></Button><Buttondisabled={isProfiling||!doesHaveInMemoryData}onClick={downloadData}title="Saveprofile..."><ButtonIcontype="export"/></Button></Fragment>);}