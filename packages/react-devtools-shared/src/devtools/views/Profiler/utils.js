/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@flow*/import{PROFILER_EXPORT_VERSION}from'react-devtools-shared/src/constants';import{separateDisplayNameAndHOCs}from'react-devtools-shared/src/utils';importtype{ProfilingDataBackend}from'react-devtools-shared/src/backend/types';importtype{ProfilingDataExport,ProfilingDataForRootExport,ProfilingDataForRootFrontend,ProfilingDataFrontend,SnapshotNode,}from'./types';importtype{TimelineData,TimelineDataExport,}from'react-devtools-timeline/src/types';constcommitGradient=['var(--color-commit-gradient-0)','var(--color-commit-gradient-1)','var(--color-commit-gradient-2)','var(--color-commit-gradient-3)','var(--color-commit-gradient-4)','var(--color-commit-gradient-5)','var(--color-commit-gradient-6)','var(--color-commit-gradient-7)','var(--color-commit-gradient-8)','var(--color-commit-gradient-9)',];//CombinesinfofromtheStore(frontend)andrendererinterfaces(backend)intotheformatrequiredbytheProfilerUI.//Thisformatcanthenbequicklyexported(andre-imported).exportfunctionprepareProfilingDataFrontendFromBackendAndStore(dataBackends:Array<ProfilingDataBackend>,operationsByRootID:Map<number,Array<Array<number>>>,snapshotsByRootID:Map<number,Map<number,SnapshotNode>>,):ProfilingDataFrontend{constdataForRoots:Map<number,ProfilingDataForRootFrontend>=newMap();consttimelineDataArray=[];dataBackends.forEach(dataBackend=>{const{timelineData}=dataBackend;if(timelineData!=null){const{batchUIDToMeasuresKeyValueArray,internalModuleSourceToRanges,laneToLabelKeyValueArray,laneToReactMeasureKeyValueArray,...rest}=timelineData;timelineDataArray.push({...rest,//Mostofthedataissafetoparseas-is,//butweneedtoconvertthenestedArraysbacktoMaps.batchUIDToMeasuresMap:newMap(batchUIDToMeasuresKeyValueArray),internalModuleSourceToRanges:newMap(internalModuleSourceToRanges),laneToLabelMap:newMap(laneToLabelKeyValueArray),laneToReactMeasureMap:newMap(laneToReactMeasureKeyValueArray),});}dataBackend.dataForRoots.forEach(({commitData,displayName,initialTreeBaseDurations,rootID})=>{constoperations=operationsByRootID.get(rootID);if(operations==null){throwError(`Couldnotfindprofilingoperationsforroot"${rootID}"`,);}constsnapshots=snapshotsByRootID.get(rootID);if(snapshots==null){throwError(`Couldnotfindprofilingsnapshotsforroot"${rootID}"`,);}//Donotfilteremptycommitsfromtheprofilerdata!//Hiding"empty"commitsmightcauseconfusiontoo.//Acommit*didhappen*evenifnoneofthecomponentstheProfilerisshowingwereinvolved.constconvertedCommitData=commitData.map((commitDataBackend,commitIndex)=>({changeDescriptions:commitDataBackend.changeDescriptions!=null?newMap(commitDataBackend.changeDescriptions):null,duration:commitDataBackend.duration,effectDuration:commitDataBackend.effectDuration,fiberActualDurations:newMap(commitDataBackend.fiberActualDurations,),fiberSelfDurations:newMap(commitDataBackend.fiberSelfDurations),passiveEffectDuration:commitDataBackend.passiveEffectDuration,priorityLevel:commitDataBackend.priorityLevel,timestamp:commitDataBackend.timestamp,updaters:commitDataBackend.updaters!==null?commitDataBackend.updaters.map(serializedElement=>{const[serializedElementDisplayName,serializedElementHocDisplayNames,]=separateDisplayNameAndHOCs(serializedElement.displayName,serializedElement.type,);return{...serializedElement,displayName:serializedElementDisplayName,hocDisplayNames:serializedElementHocDisplayNames,};}):null,}),);dataForRoots.set(rootID,{commitData:convertedCommitData,displayName,initialTreeBaseDurations:newMap(initialTreeBaseDurations),operations,rootID,snapshots,});},);});return{dataForRoots,imported:false,timelineData:timelineDataArray};}//ConvertsaProfilingdataexportintotheformatrequiredbytheStore.exportfunctionprepareProfilingDataFrontendFromExport(profilingDataExport:ProfilingDataExport,):ProfilingDataFrontend{const{version}=profilingDataExport;if(version!==PROFILER_EXPORT_VERSION){throwError(`Unsupportedprofileexportversion"${version}".Supportedversionis"${PROFILER_EXPORT_VERSION}".`,);}consttimelineData:Array<TimelineData>=profilingDataExport.timelineData?profilingDataExport.timelineData.map(({batchUIDToMeasuresKeyValueArray,componentMeasures,duration,flamechart,internalModuleSourceToRanges,laneToLabelKeyValueArray,laneToReactMeasureKeyValueArray,nativeEvents,networkMeasures,otherUserTimingMarks,reactVersion,schedulingEvents,snapshots,snapshotHeight,startTime,suspenseEvents,thrownErrors,})=>({//Mostofthedataissafetoparseas-is,//butweneedtoconvertthenestedArraysbacktoMaps.batchUIDToMeasuresMap:newMap(batchUIDToMeasuresKeyValueArray),componentMeasures,duration,flamechart,internalModuleSourceToRanges:newMap(internalModuleSourceToRanges),laneToLabelMap:newMap(laneToLabelKeyValueArray),laneToReactMeasureMap:newMap(laneToReactMeasureKeyValueArray),nativeEvents,networkMeasures,otherUserTimingMarks,reactVersion,schedulingEvents,snapshots,snapshotHeight,startTime,suspenseEvents,thrownErrors,}),):[];constdataForRoots:Map<number,ProfilingDataForRootFrontend>=newMap();profilingDataExport.dataForRoots.forEach(({commitData,displayName,initialTreeBaseDurations,operations,rootID,snapshots,})=>{dataForRoots.set(rootID,{commitData:commitData.map(({changeDescriptions,duration,effectDuration,fiberActualDurations,fiberSelfDurations,passiveEffectDuration,priorityLevel,timestamp,updaters,})=>({changeDescriptions:changeDescriptions!=null?newMap(changeDescriptions):null,duration,effectDuration,fiberActualDurations:newMap(fiberActualDurations),fiberSelfDurations:newMap(fiberSelfDurations),passiveEffectDuration,priorityLevel,timestamp,updaters,}),),displayName,initialTreeBaseDurations:newMap(initialTreeBaseDurations),operations,rootID,snapshots:newMap(snapshots),});},);return{dataForRoots,imported:true,timelineData,};}//ConvertsaStoreProfilingdataintoaformatthatcanbesafely(JSON)serializedforexport.exportfunctionprepareProfilingDataExport(profilingDataFrontend:ProfilingDataFrontend,):ProfilingDataExport{consttimelineData:Array<TimelineDataExport>=profilingDataFrontend.timelineData.map(({batchUIDToMeasuresMap,componentMeasures,duration,flamechart,internalModuleSourceToRanges,laneToLabelMap,laneToReactMeasureMap,nativeEvents,networkMeasures,otherUserTimingMarks,reactVersion,schedulingEvents,snapshots,snapshotHeight,startTime,suspenseEvents,thrownErrors,})=>({//Mostofthedataissafetoserializeas-is,//butweneedtoconverttheMapstonestedArrays.batchUIDToMeasuresKeyValueArray:Array.from(batchUIDToMeasuresMap.entries(),),componentMeasures:componentMeasures,duration,flamechart,internalModuleSourceToRanges:Array.from(internalModuleSourceToRanges.entries(),),laneToLabelKeyValueArray:Array.from(laneToLabelMap.entries()),laneToReactMeasureKeyValueArray:Array.from(laneToReactMeasureMap.entries(),),nativeEvents,networkMeasures,otherUserTimingMarks,reactVersion,schedulingEvents,snapshots,snapshotHeight,startTime,suspenseEvents,thrownErrors,}),);constdataForRoots:Array<ProfilingDataForRootExport>=[];profilingDataFrontend.dataForRoots.forEach(({commitData,displayName,initialTreeBaseDurations,operations,rootID,snapshots,})=>{dataForRoots.push({commitData:commitData.map(({changeDescriptions,duration,effectDuration,fiberActualDurations,fiberSelfDurations,passiveEffectDuration,priorityLevel,timestamp,updaters,})=>({changeDescriptions:changeDescriptions!=null?Array.from(changeDescriptions.entries()):null,duration,effectDuration,fiberActualDurations:Array.from(fiberActualDurations.entries()),fiberSelfDurations:Array.from(fiberSelfDurations.entries()),passiveEffectDuration,priorityLevel,timestamp,updaters,}),),displayName,initialTreeBaseDurations:Array.from(initialTreeBaseDurations.entries(),),operations,rootID,snapshots:Array.from(snapshots.entries()),});},);return{version:PROFILER_EXPORT_VERSION,dataForRoots,timelineData,};}exportconstgetGradientColor=(value:number):string=>{constmaxIndex=commitGradient.length-1;letindex;if(Number.isNaN(value)){index=0;}elseif(!Number.isFinite(value)){index=maxIndex;}else{index=Math.max(0,Math.min(maxIndex,value))*maxIndex;}returncommitGradient[Math.round(index)];};exportconstformatDuration=(duration:number):number|string=>Math.round(duration*10)/10||'<0.1';exportconstformatPercentage=(percentage:number):number=>Math.round(percentage*100);exportconstformatTime=(timestamp:number):number=>Math.round(Math.round(timestamp)/100)/10;exportconstscale=(minValue:number,maxValue:number,minRange:number,maxRange:number,):((value:number,fallbackValue:number)=>number)=>(value:number,fallbackValue:number)=>maxValue-minValue===0?fallbackValue:((value-minValue)/(maxValue-minValue))*(maxRange-minRange);