/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@flow*/import*asReactfrom'react';import{Fragment,memo,useCallback,useContext}from'react';import{areEqual}from'react-window';import{barWidthThreshold}from'./constants';import{getGradientColor}from'./utils';importChartNodefrom'./ChartNode';import{SettingsContext}from'../Settings/SettingsContext';importtype{ChartNodeasChartNodeType}from'./FlamegraphChartBuilder';importtype{ItemData}from'./CommitFlamegraph';typeProps={data:ItemData,index:number,style:Object,...};functionCommitFlamegraphListItem({data,index,style}:Props):React.Node{const{chartData,onElementMouseEnter,onElementMouseLeave,scaleX,selectedChartNode,selectedChartNodeIndex,selectFiber,width,}=data;const{renderPathNodes,maxSelfDuration,rows}=chartData;const{lineHeight}=useContext(SettingsContext);consthandleClick=useCallback((event:SyntheticMouseEvent<EventTarget>,id:number,name:string)=>{event.stopPropagation();selectFiber(id,name);},[selectFiber],);consthandleMouseEnter=(nodeData:ChartNodeType)=>{const{id,name}=nodeData;onElementMouseEnter({id,name});};consthandleMouseLeave=()=>{onElementMouseLeave();};//ListitemsareabsolutelypositionedusingtheCSS"top"attribute.//The"left"valuewillalwaysbe0.//Sinceheightisfixed,andwidthisbasedonthenode'sduration,//Wecanignorethosevaluesaswell.consttop=parseInt(style.top,10);constrow=rows[index];constselectedNodeOffset=scaleX(selectedChartNode!==null?selectedChartNode.offset:0,width,);return(<Fragment>{row.map(chartNode=>{const{didRender,id,label,name,offset,selfDuration,treeBaseDuration,}=chartNode;constnodeOffset=scaleX(offset,width);constnodeWidth=scaleX(treeBaseDuration,width);//Filteroutnodesthataretoosmalltoseeorclick.//Thisalsohelpsrenderlargetreesfaster.if(nodeWidth<barWidthThreshold){returnnull;}//Filteroutnodesthatareoutsideofthehorizontalwindow.if(nodeOffset+nodeWidth<selectedNodeOffset||nodeOffset>selectedNodeOffset+width){returnnull;}letcolor='url(#didNotRenderPattern)';lettextColor='var(--color-commit-did-not-render-pattern-text)';if(didRender){color=getGradientColor(selfDuration/maxSelfDuration);textColor='var(--color-commit-gradient-text)';}elseif(renderPathNodes.has(id)){color='var(--color-commit-did-not-render-fill)';textColor='var(--color-commit-did-not-render-fill-text)';}return(<ChartNodecolor={color}height={lineHeight}isDimmed={index<selectedChartNodeIndex}key={id}label={label}onClick={event=>handleClick(event,id,name)}onMouseEnter={()=>handleMouseEnter(chartNode)}onMouseLeave={handleMouseLeave}textStyle={{color:textColor}}width={nodeWidth}x={nodeOffset-selectedNodeOffset}y={top}/>);})}</Fragment>);}exportdefault(memo(CommitFlamegraphListItem,areEqual,):React.ComponentType<Props>);