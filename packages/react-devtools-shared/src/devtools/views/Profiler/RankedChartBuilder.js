/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@flow*/import{ElementTypeForwardRef,ElementTypeMemo,}from'react-devtools-shared/src/types';import{formatDuration}from'./utils';importProfilerStorefrom'react-devtools-shared/src/devtools/ProfilerStore';importtype{CommitTree}from'./types';exporttypeChartNode={id:number,label:string,name:string,value:number,};exporttypeChartData={maxValue:number,nodes:Array<ChartNode>,};constcachedChartData:Map<string,ChartData>=newMap();exportfunctiongetChartData({commitIndex,commitTree,profilerStore,rootID,}:{commitIndex:number,commitTree:CommitTree,profilerStore:ProfilerStore,rootID:number,}):ChartData{constcommitDatum=profilerStore.getCommitData(rootID,commitIndex);const{fiberActualDurations,fiberSelfDurations}=commitDatum;const{nodes}=commitTree;constchartDataKey=`${rootID}-${commitIndex}`;if(cachedChartData.has(chartDataKey)){return((cachedChartData.get(chartDataKey):any):ChartData);}letmaxSelfDuration=0;constchartNodes:Array<ChartNode>=[];fiberActualDurations.forEach((actualDuration,id)=>{constnode=nodes.get(id);if(node==null){throwError(`Couldnotfindnodewithid"${id}"incommittree`);}const{displayName,key,parentID,type}=node;//Don'tshowtherootnodeinthischart.if(parentID===0){return;}constselfDuration=fiberSelfDurations.get(id)||0;maxSelfDuration=Math.max(maxSelfDuration,selfDuration);constname=displayName||'Anonymous';constmaybeKey=key!==null?`key="${key}"`:'';letmaybeBadge='';if(type===ElementTypeForwardRef){maybeBadge='(ForwardRef)';}elseif(type===ElementTypeMemo){maybeBadge='(Memo)';}constlabel=`${name}${maybeBadge}${maybeKey}(${formatDuration(selfDuration,)}ms)`;chartNodes.push({id,label,name,value:selfDuration,});});constchartData={maxValue:maxSelfDuration,nodes:chartNodes.sort((a,b)=>b.value-a.value),};cachedChartData.set(chartDataKey,chartData);returnchartData;}exportfunctioninvalidateChartData():void{cachedChartData.clear();}