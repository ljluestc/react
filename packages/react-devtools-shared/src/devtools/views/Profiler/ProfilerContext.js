/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@flow*/importtype{ReactContext}from'shared/ReactTypes';import*asReactfrom'react';import{createContext,useCallback,useContext,useMemo,useState}from'react';import{unstable_batchedUpdatesasbatchedUpdates}from'react-dom';import{useLocalStorage,useSubscription}from'../hooks';import{TreeDispatcherContext,TreeStateContext,}from'../Components/TreeContext';import{StoreContext}from'../context';import{logEvent}from'react-devtools-shared/src/Logger';importtype{ProfilingDataFrontend}from'./types';exporttypeTabID='flame-chart'|'ranked-chart'|'timeline';exporttypeContext={//WhichtabisselectedintheProfilerUI?selectedTabID:TabID,selectTab(id:TabID):void,//Storesubscriptionbasedvalues.//TheisProfilingvaluemaybemodifiedbytherecordbuttonintheProfilertoolbar,//orfromthebackenditself(afterareload-and-profileaction).//ItissyncedbetweenthebackendandfrontendviaaStoresubscription.didRecordCommits:boolean,isProcessingData:boolean,isProfiling:boolean,profilingData:ProfilingDataFrontend|null,startProfiling():void,stopProfiling():void,supportsProfiling:boolean,//Whichrootshouldprofilingdatabeshownfor?//Thisvalueshouldbeinitializedtoeither://1.TheselectedrootintheComponentstree(ifithasanyprofilingdata)or//2.Thefirstrootinthelistwithprofilingdata.rootID:number|null,setRootID:(id:number)=>void,//Controlswhethercommitsarefilteredbyduration.//ThisvalueiscontrolledbyafiltertoggleUIintheProfilertoolbar.//ItimpactsthecommitselectorUIaswellasthefibercommitsbarchart.isCommitFilterEnabled:boolean,setIsCommitFilterEnabled:(value:boolean)=>void,minCommitDuration:number,setMinCommitDuration:(value:number)=>void,//WhichcommitiscurrentlyselectedinthecommitselectorUI.//Notethatthisistheindexofthecommitinallcommits(non-filtered)thatwereprofiled.//ThisvalueiscontrolledbythecommitselectorUIintheProfilertoolbar.//Itimpactstheflamegraphandrankedcharts.selectedCommitIndex:number|null,selectCommitIndex:(value:number|null)=>void,//WhichfiberiscurrentlyselectedintheRankedorFlamegraphcharts?selectedFiberID:number|null,selectedFiberName:string|null,selectFiber:(id:number|null,name:string|null)=>void,};constProfilerContext:ReactContext<Context>=createContext<Context>(((null:any):Context),);ProfilerContext.displayName='ProfilerContext';typeStoreProfilingState={didRecordCommits:boolean,isProcessingData:boolean,isProfiling:boolean,profilingData:ProfilingDataFrontend|null,supportsProfiling:boolean,};typeProps={children:React$Node,};functionProfilerContextController({children}:Props):React.Node{conststore=useContext(StoreContext);const{selectedElementID}=useContext(TreeStateContext);constdispatch=useContext(TreeDispatcherContext);const{profilerStore}=store;constsubscription=useMemo(()=>({getCurrentValue:()=>({didRecordCommits:profilerStore.didRecordCommits,isProcessingData:profilerStore.isProcessingData,isProfiling:profilerStore.isProfiling,profilingData:profilerStore.profilingData,supportsProfiling:store.rootSupportsBasicProfiling,}),subscribe:(callback:Function)=>{profilerStore.addListener('profilingData',callback);profilerStore.addListener('isProcessingData',callback);profilerStore.addListener('isProfiling',callback);store.addListener('rootSupportsBasicProfiling',callback);return()=>{profilerStore.removeListener('profilingData',callback);profilerStore.removeListener('isProcessingData',callback);profilerStore.removeListener('isProfiling',callback);store.removeListener('rootSupportsBasicProfiling',callback);};},}),[profilerStore,store],);const{didRecordCommits,isProcessingData,isProfiling,profilingData,supportsProfiling,}=useSubscription<StoreProfilingState>(subscription);const[prevProfilingData,setPrevProfilingData]=useState<ProfilingDataFrontend|null>(null);const[rootID,setRootID]=useState<number|null>(null);const[selectedFiberID,selectFiberID]=useState<number|null>(null);const[selectedFiberName,selectFiberName]=useState<string|null>(null);constselectFiber=useCallback((id:number|null,name:string|null)=>{selectFiberID(id);selectFiberName(name);//SyncselectiontotheComponentstabforconvenience.//Keepinmindthatprofilingdatamaybefromaprevioussession.//Ifdatahasbeenimported,weshouldskiptheselectionsync.if(id!==null&&profilingData!==null&&profilingData.imported===false){//Weshouldstillchecktoseeifthiselementisstillinthestore.//Itmayhavebeenremovedduringprofiling.if(store.containsElement(id)){dispatch({type:'SELECT_ELEMENT_BY_ID',payload:id,});}}},[dispatch,selectFiberID,selectFiberName,store,profilingData],);constsetRootIDAndClearFiber=useCallback((id:number|null)=>{selectFiber(null,null);setRootID(id);},[setRootID,selectFiber],);if(prevProfilingData!==profilingData){batchedUpdates(()=>{setPrevProfilingData(profilingData);constdataForRoots=profilingData!==null?profilingData.dataForRoots:null;if(dataForRoots!=null){constfirstRootID=dataForRoots.keys().next().value||null;if(rootID===null||!dataForRoots.has(rootID)){letselectedElementRootID=null;if(selectedElementID!==null){selectedElementRootID=store.getRootIDForElement(selectedElementID);}if(selectedElementRootID!==null&&dataForRoots.has(selectedElementRootID)){setRootIDAndClearFiber(selectedElementRootID);}else{setRootIDAndClearFiber(firstRootID);}}}});}const[isCommitFilterEnabled,setIsCommitFilterEnabled]=useLocalStorage<boolean>('React::DevTools::isCommitFilterEnabled',false);const[minCommitDuration,setMinCommitDuration]=useLocalStorage<number>('minCommitDuration',0,);const[selectedCommitIndex,selectCommitIndex]=useState<number|null>(null,);const[selectedTabID,selectTab]=useLocalStorage<TabID>('React::DevTools::Profiler::defaultTab','flame-chart',value=>{logEvent({event_name:'profiler-tab-changed',metadata:{tabId:value,},});},);conststartProfiling=useCallback(()=>{logEvent({event_name:'profiling-start',metadata:{current_tab:selectedTabID},});store.profilerStore.startProfiling();},[store,selectedTabID]);conststopProfiling=useCallback(()=>store.profilerStore.stopProfiling(),[store],);if(isProfiling){batchedUpdates(()=>{if(selectedCommitIndex!==null){selectCommitIndex(null);}if(selectedFiberID!==null){selectFiberID(null);selectFiberName(null);}});}constvalue=useMemo(()=>({selectedTabID,selectTab,didRecordCommits,isProcessingData,isProfiling,profilingData,startProfiling,stopProfiling,supportsProfiling,rootID,setRootID:setRootIDAndClearFiber,isCommitFilterEnabled,setIsCommitFilterEnabled,minCommitDuration,setMinCommitDuration,selectedCommitIndex,selectCommitIndex,selectedFiberID,selectedFiberName,selectFiber,}),[selectedTabID,selectTab,didRecordCommits,isProcessingData,isProfiling,profilingData,startProfiling,stopProfiling,supportsProfiling,rootID,setRootID,setRootIDAndClearFiber,isCommitFilterEnabled,setIsCommitFilterEnabled,minCommitDuration,setMinCommitDuration,selectedCommitIndex,selectCommitIndex,selectedFiberID,selectedFiberName,selectFiber,],);return(<ProfilerContext.Providervalue={value}>{children}</ProfilerContext.Provider>);}export{ProfilerContext,ProfilerContextController};