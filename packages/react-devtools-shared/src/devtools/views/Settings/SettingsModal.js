/***Copyright(c)MetaPlatforms,Inc.andaffiliates.**ThissourcecodeislicensedundertheMITlicensefoundinthe*LICENSEfileintherootdirectoryofthissourcetree.**@flow*/import*asReactfrom'react';import{useCallback,useContext,useEffect,useMemo,useRef}from'react';import{SettingsModalContext}from'./SettingsModalContext';importButtonfrom'../Button';importButtonIconfrom'../ButtonIcon';importTabBarfrom'../TabBar';import{StoreContext}from'../context';import{useLocalStorage,useModalDismissSignal,useSubscription,}from'../hooks';importComponentsSettingsfrom'./ComponentsSettings';importDebuggingSettingsfrom'./DebuggingSettings';importGeneralSettingsfrom'./GeneralSettings';importProfilerSettingsfrom'./ProfilerSettings';importstylesfrom'./SettingsModal.css';typeTabID='general'|'components'|'profiler';exportdefaultfunctionSettingsModal(_:{}):React.Node{const{isModalShowing,setIsModalShowing}=useContext(SettingsModalContext);conststore=useContext(StoreContext);const{profilerStore}=store;//Updatingpreferenceswhileprofilingisinprogresscouldbreakthings(e.g.filtering)//Explicitlydisallowitfornow.constisProfilingSubscription=useMemo(()=>({getCurrentValue:()=>profilerStore.isProfiling,subscribe:(callback:Function)=>{profilerStore.addListener('isProfiling',callback);return()=>profilerStore.removeListener('isProfiling',callback);},}),[profilerStore],);constisProfiling=useSubscription<boolean>(isProfilingSubscription);if(isProfiling&&isModalShowing){setIsModalShowing(false);}if(!isModalShowing){returnnull;}return<SettingsModalImpl/>;}functionSettingsModalImpl(_:{}){const{setIsModalShowing}=useContext(SettingsModalContext);constdismissModal=useCallback(()=>setIsModalShowing(false),[setIsModalShowing],);const[selectedTabID,selectTab]=useLocalStorage<TabID>('React::DevTools::selectedSettingsTabID','general',);constmodalRef=useRef<HTMLDivElement|null>(null);useModalDismissSignal(modalRef,dismissModal);useEffect(()=>{if(modalRef.current!==null){modalRef.current.focus();}},[modalRef]);letview=null;switch(selectedTabID){case'components':view=<ComponentsSettings/>;break;//$FlowFixMe[incompatible-type]isthismissinginTabID?case'debugging':view=<DebuggingSettings/>;break;case'general':view=<GeneralSettings/>;break;case'profiler':view=<ProfilerSettings/>;break;default:break;}return(<divclassName={styles.Background}><divclassName={styles.Modal}ref={modalRef}><divclassName={styles.Tabs}><TabBarcurrentTab={selectedTabID}id="Settings"selectTab={selectTab}tabs={tabs}type="settings"/><divclassName={styles.Spacer}/><ButtononClick={dismissModal}title="Closesettingsdialog"><ButtonIcontype="close"/></Button></div><divclassName={styles.Content}>{view}</div></div></div>);}consttabs=[{id:'general',icon:'settings',label:'General',},{id:'debugging',icon:'bug',label:'Debugging',},{id:'components',icon:'components',label:'Components',},{id:'profiler',icon:'profiler',label:'Profiler',},];