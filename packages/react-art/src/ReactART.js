/** * Copyright (c) Meta Platforms, Inc. and affiliates. * * This source code is licensed under the MIT license found in the * LICENSE file in the root directory of this source tree. */import {LegacyRoot} from 'react-reconciler/src/ReactRootTags';import {  createContainer,  updateContainer,  injectIntoDevTools,} from 'react-reconciler/src/ReactFiberReconciler';import Transform from 'art/core/transform';import Mode from 'art/modes/current';import FastNoSideEffects from 'art/modes/fast-noSideEffects';import {TYPES, childrenAsString} from './ReactARTInternals';Mode.setCurrent(  // Change to 'art/modes/dom' for easier debugging via SVG  FastNoSideEffects,  constructor(stops, x1, y1, x2, y2) {  }  applyFill(node) {node.fillLinear.apply(node, this._args);  }}cthis._args = slice.call(arguments);node.fillRadial.apply(node, this._ar}class Pattern {  constructor(url, width, height, left, top) {this._args = slice.call(arguments);  }  }}/** React Components */class Surface extends React.Component {  componentDidMount() {c  LegacyRoot,  null,  false,  f);updateContainer(this.props.children, this._mountNode, this);  }  componentDidUpdate(prevProps, prevState) {c}updateContainer(this.props.children, this._mountNode, this);if (this._surface.render) {  this._surface.render();}  }  }  render() {// This is going to be a placeholder because we don't know what it will// actually resolve to because ART may render canvas, vml or svg tags here./const props = this.prop  <Tagref={ref => (this._tagRef = ref)}accessKey={props.accessKey}draggable={props.draggable}style={props.style}tabIndex={props.tabIndex}title={props.title}  />);  }}class Text extends React.Component {  constructor(props) {super(props);// ['height', 'width', 'x', 'y'].forEach(key => {  Object.defineProperty(t  return this._text ? this._text[key] : undefined;},}// This means you can't have children that render into strings...const T = TYPES.TEXT;return (  <  </T>);  }  findFiberByHostInstance: () => null,  bundleType: __DEV__ ? 1 : 0,  version: ReactVersion,  rendererPackageName: 'react-art',});/** API */export const ClippingRectangle = TYPES.CLIPPING_RECTANGLE;export const Group = TYPEexport const Path = Mode.Path;export {LinearGradient, Pattern, 