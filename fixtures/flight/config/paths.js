'use strict';const getPublicUrlOrPath = require('react-dev-utils/getPublicUrlOrPath');// Make sure any symlinks in the project folder are resolved:// https://github.com/facebook/create-react-app/issues/637const appDirectory = fs.realpathSync(process.cwd());// "public path" at which the app is served.// webpack needs to know it to put the right <script> hrefs into HTML even in// single-page apps that may serve index.html for nested URLs like /todos/42.// We can't use a relative path in HTML because we don't want to load somethconst publicUrlOrPath = getPublicUrlOrPath(  process.env.NODE_ENV === 'development',  require(resolveApp('package.json')).homepage,  process.env.PUBLIC_URL);const buildPath = process.env.BUILD_PATH || 'build';const moduleFileExtensions = [  'web.mjs',  'mjs',  'web.js',  'js',  'web.ts','tsx',  'web.jsx',  'jsx',];// Resolve file paths in the same order as webpackconst resolveModule = (resolveFn, filePath) => {  const extension = moduleFileExtensions.find(extension =>fs.existsSync(resolveFn(`${filePath}.${extension}`))  );  if (extension) {return resolveFn(`${filePath}.${extension}`);  }  return resolveFn(`${filePath}.js`);};// config after eject: we're in ./config/module.exports = {  dotenv: resolveApp('.env'),appPublic: resolveApp('public'),  appIndexJs: resolveModule(resolveApp, 'src/index'),  appPackageJson: resolveApp('package.json'),  appSrc: resolveApp('src'),  ap  yarnLockFile: resolveApp('yarn.lock'),  testsSetup: resolveModule(resolveApp, 'src/setupTests'),  a  appTsBuildInfoFile: resolveApp('node_modules/.cache/tsconfig.tsbuildinfo'),  };module.exports.moduleFileExtensions = moduleFileExtensions;