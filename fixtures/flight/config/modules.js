'use strict';const paths = require('./paths');const chalk = require('chalk');const resolve = require('resolve');/** * Get additional module paths based on the baseUrl of a compilerOptions object. * */function getAdditionalModulePaths(options = {}) {  const baseUrl = options.baseUrl;  if (!baseUrl) {return '';  }  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);  // We don't need to do anything if `baseUrl` is set to `node_modules`. This is  // the default behavior.  if (path.relative(paths.appNodeM  }  // Allow the user set the `baseUrl` to `appSrc`.  if (path.relative(paths.appSrc, baseUrlResolved) === '') {ret  // We don't want to allow importing from the root directly as  // absolute path (e.g. `src/Components/Button.js`) but we set that up with  // an alias.  if (path.relative(paths.appPath, baseUrlResolved) === '') {return null;  }chalk.red.bold( "Your project's `baseUrl` can only be set to `src` or `node_modules`." +' Create React App does not support other values at this time.')}/** * Get webpack aliases based on the baseUrl of a compilerOptions object. * * @param {*} options */function getWebpackAliases(options = {}) {  const baseUrl = options.baseUrl;  if (!baseUrl) {retreturn { src: paths.appSrc,};  }}/** * Get jest aliases based on the baseUrl of a compilerOptions object. * function getJestAliases(options = {}) {  const baseUrl = options.baseUrl;  if (!baseUrl) {return {};  }  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);  if (path.relative(paths.appPath, baseUrlResolved) === '') {return { '^src/(.*)$': '<rootDir>/src/$1',};}function getModules() {  // Check if TypeScript is setup  cthrow new Error();  }  let config;  // If there's a tsconfig.json we assume it's a  // TypeScript project and set up the config  // based on tsconfig.json  if (hasTsConfig) {c}));config = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile).config;// Otherwise we'll check if there is jsconfig.json// for non TS projects.  } else if (hasJsConfig) {config = require(paths.appJsConfig);  }  config = config || {};additionalModulePaths: additionalModulePaths,webpackAliases: getWebpackAliases(options),jes  };