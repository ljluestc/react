#!/usr/bin/envnode'usestrict';const{spawn}=require('child_process');
const{join}=require('path');constROOT_PATH=join(__dirname,'..','..');
constreactVersion=process.argv[2];
constinlinePackagePath=join(ROOT_PATH,'packages','react-devtools-inline');
constshellPackagePath=join(ROOT_PATH,'packages','react-devtools-shell');
constscreenshotPath=join(ROOT_PATH,'tmp','screenshots');const{SUCCESSFUL_COMPILATION_MESSAGE}=require(join(
shellPackagePath,
'constants.js'
));letbuildProcess=null;
letserverProcess=null;
lettestProcess=null;functionformat(loggable){
return`${loggable}`
.split('\n')
.filter(line=>{
returnline.trim()!=='';
})
.map(line=>`${line}`)
.join('\n');
}functionlogBright(loggable){
console.log(`\x1b[1m${loggable}\x1b[0m`);
}functionlogDim(loggable){
constformatted=format(loggable,2);
if(formatted!==''){
console.log(`\x1b[2m${formatted}\x1b[0m`);
}
}functionlogError(loggable){
constformatted=format(loggable,2);
if(formatted!==''){
console.error(`\x1b[31m${formatted}\x1b[0m`);
}
}functionbuildInlinePackage(){
logBright('Buildinginlinepackages');buildProcess=spawn('yarn',['build'],{cwd:inlinePackagePath});
buildProcess.stdout.on('data',data=>{
logDim(data);
});
buildProcess.stderr.on('data',data=>{
if(`${data}`.includes('Warning')){
logDim(data);
}else{
logError(`Error:\n${data}`);exitWithCode(1);
}
});
buildProcess.on('close',code=>{
logBright('Inlinepackagebuilt');runTestShell();
});
}functionrunTestShell(){
consttimeoutID=setTimeout(()=>{
//Assumethetestshellserverfailedtostart.
logError('Testingshellserverfailedtostart');
exitWithCode(1);
},60*1000);logBright('Startingtestingshellserver');if(!reactVersion){
serverProcess=spawn('yarn',['start'],{cwd:shellPackagePath});
}else{
serverProcess=spawn('yarn',['start'],{
cwd:shellPackagePath,
env:{...process.env,REACT_VERSION:reactVersion},
});
}serverProcess.stdout.on('data',data=>{
if(`${data}`.includes(SUCCESSFUL_COMPILATION_MESSAGE)){
logBright('Testingshellserverrunning');clearTimeout(timeoutID);runEndToEndTests();
}
});serverProcess.stderr.on('data',data=>{
if(`${data}`.includes('EADDRINUSE')){
//Somethingisoccupyingthisport;
//Wecouldkilltheprocessandrestartbutprobablybettertoprompttheusertodothis.logError('Freeuptheportandre-runtests:');
logBright('kill-9$(lsof-ti:8080)');exitWithCode(1);
}elseif(`${data}`.includes('ERROR')){
logError(`Error:\n${data}`);exitWithCode(1);
}else{
//Non-fatalstufflikeBabeloptimizationwarningsetc.
logDim(data);
}
});
}asyncfunctionrunEndToEndTests(){
logBright('Runninge2etests');
if(!reactVersion){
testProcess=spawn('yarn',['test:e2e',`--output=${screenshotPath}`],{
cwd:inlinePackagePath,
});
}else{
testProcess=spawn('yarn',['test:e2e',`--output=${screenshotPath}`],{
cwd:inlinePackagePath,
env:{...process.env,REACT_VERSION:reactVersion},
});
}testProcess.stdout.on('data',data=>{
//LogwithoutformattingbecausePlaywrightappliesitsownformatting.
constformatted=format(data);
if(formatted!==''){
console.log(formatted);
}
});
testProcess.stderr.on('data',data=>{
//LogwithoutformattingbecausePlaywrightappliesitsownformatting.
constformatted=format(data);
if(formatted!==''){
console.error(formatted);
}exitWithCode(1);
});
testProcess.on('close',code=>{
logBright(`Testscompletedwithcode:${code}`);exitWithCode(code);
});
}functionexitWithCode(code){
if(buildProcess!==null){
try{
logBright('Shuttingdownbuildprocess');
buildProcess.kill();
}catch(error){
logError(error);
}
}if(serverProcess!==null){
try{
logBright('Shuttingdownshellserverprocess');
serverProcess.kill();
}catch(error){
logError(error);
}
}if(testProcess!==null){
try{
logBright('Shuttingdowntestprocess');
testProcess.kill();
}catch(error){
logError(error);
}
}process.exit(code);
}buildInlinePackage();
